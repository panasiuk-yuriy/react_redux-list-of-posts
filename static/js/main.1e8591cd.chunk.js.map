{"version":3,"sources":["store/loading.ts","store/message.ts","store/posts.ts","store/query.ts","helpers/api.ts","store/index.ts","components/Start.tsx","components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList.tsx","components/Post/Post.tsx","components/SearchField/SearchField.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["initialState","loading","visible","reducer","state","action","type","setMessage","message","posts","filter","post","id","postId","map","userComments","comment","commentId","query","text","toLowerCase","getAll","url","fetch","then","responce","json","rootReducer","combineReducers","loadingReducer","postsReducer","messageReducer","queryReducer","isLoading","isVisible","getMessage","getVisiblePosts","createSelector","body","title","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","useSelector","className","onClick","a","postFromServer","usersFromServer","commentsFromServer","preparedPosts","user","find","currentUser","userId","disabled","User","name","href","email","address","city","street","suite","Comment","deleteComment","CommentList","key","Post","SearchField","useState","visibleQuery","setVisibleQuery","dispatchWithDebounce","useCallback","debounce","value","placeholder","onChange","event","newQuery","currentTarget","handleSetQuery","PostList","visiblePosts","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e8591cd.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\ntype LoadingState = {\n  loading: boolean;\n  visible: boolean;\n};\n\nconst initialState = {\n  loading: false,\n  visible: false,\n};\n\nconst reducer = (state = initialState, action: AnyAction): LoadingState => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        visible: false,\n        loading: true,\n      };\n\n    case FINISH_LOADING:\n      return {\n        loading: false,\n        visible: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, posts });\nexport const deletePosts = (postId: number) => ({ type: DELETE_POST, postId });\nexport const deleteComment = (postId: number, commentId: number) => (\n  { type: DELETE_COMMENT, postId, commentId });\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_POST:\n      return posts.filter((post: Post) => post.id !== action.postId);\n    case DELETE_COMMENT:\n      return posts.map((post: Post) => {\n        if (post.id === action.postId) {\n          const userComments = post.userComments?.filter((comment: Comment) => (\n            comment.id !== action.commentId));\n\n          return {\n            ...post,\n            userComments,\n          };\n        }\n\n        return post;\n      });\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHANGE_QUERY = 'CHANGE_QUERY';\n\nexport const setQuery = (text: string) => ({ type: CHANGE_QUERY, text });\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case CHANGE_QUERY:\n      return action.text.toLowerCase();\n    default:\n\n      return query;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\nexport const getAll = <T> (url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(responce => responce.json());\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\nimport { createSelector } from 'reselect';\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport postsReducer, { setPosts } from './posts';\nimport queryReducer from './query';\nimport { getAll } from '../helpers/api';\n\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  posts: postsReducer,\n  message: messageReducer,\n  query: queryReducer,\n});\n\nexport type RootState = {\n  loading: {\n    loading: boolean;\n    visible: boolean;\n  };\n  message: string;\n  posts: Post[];\n  query: string;\n};\n\nexport const isLoading = (state: RootState) => state.loading.loading;\nexport const isVisible = (state: RootState) => state.loading.visible;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\n\nexport const getVisiblePosts = createSelector(\n  getPosts,\n  getQuery,\n\n  (posts: Post[], query: string) => {\n    return posts.filter(post => (post.body + post.title)\n      .toLowerCase()\n      .includes(query.toLowerCase()));\n  },\n);\n\nexport const loadMessage = () => {\n  return async (dispatch: Dispatch<unknown>) => {\n    dispatch(startLoading());\n\n    try {\n      const postFromServer = await getAll<Post>('posts.json');\n      const usersFromServer = await getAll<User>('users.json');\n      const commentsFromServer = await getAll<Comment>('comments.json');\n\n      const preparedPosts = postFromServer.map((post: Post) => {\n        const user = usersFromServer.find((currentUser: User) => currentUser.id === post.userId);\n        const userComments = commentsFromServer\n          .filter((comment: Comment) => (comment.postId === post.id));\n\n        return {\n          ...post,\n          user,\n          userComments,\n        };\n      });\n\n      dispatch(setMessage('Data was received'));\n      dispatch(setPosts(preparedPosts));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isLoading, loadMessage } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"buttonload\"\n      onClick={() => dispatch(loadMessage())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport './User.css';\n\ntype Props = {\n  user?: User;\n};\n\nconst User: React.FC<Props> = ({ user }) => (\n  <div className=\"post__user user\">\n    <h4 className=\"user__name\">{user?.name}</h4>\n    <p className=\"user__email\">\n      Email:\n      <br />\n      <a href={`mailto:${user?.email}`}>\n\n        {user?.email}\n      </a>\n    </p>\n    <p>\n      City:\n      <br />\n      <span className=\"user__address\">{user?.address?.city}</span>\n    </p>\n    <p>\n      Street:\n      <br />\n      <span className=\"user__address\">{user?.address?.street}</span>\n    </p>\n    <p>\n      Address:\n      <br />\n      <span className=\"user__address\">{user?.address?.suite}</span>\n    </p>\n  </div>\n);\n\nexport default User;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteComment } from '../../store/posts';\nimport './Comment.css';\n\ntype Props = {\n  comment: Comment;\n  postId: number;\n};\n\nconst Comment: React.FC<Props> = ({\n  // лінтер так виставляє Sorry;\n  comment: {\n    id, name, email, body,\n  },\n  postId,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"comment\">\n      <button\n        className=\"btn btn__comment\"\n        type=\"button\"\n        onClick={() => dispatch(deleteComment(postId, id))}\n      >\n        <i className=\"fa fa-trash\" />\n\n      </button>\n      <h5 className=\"comment__name\">{name}</h5>\n      <p className=\"comment__body\">{body}</p>\n      <p>\n        <a href={`mailto:${email}`} className=\"comment__email\">\n          {email}\n        </a>\n      </p>\n    </div>\n\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment/Comment';\n\ntype Props = {\n  userComments?: Comment[];\n  postId: number;\n};\n\nconst CommentList: React.FC<Props> = ({ postId, userComments }) => (\n  <div className=\"comments__container\">\n    {userComments?.map((comment) => (\n      <Comment\n        key={comment.id}\n        comment={comment}\n        postId={postId}\n      />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport User from '../User/User';\nimport CommentList from '../CommentList';\nimport './Post.css';\nimport { deletePosts } from '../../store/posts';\n\ninterface Props {\n  post: Post;\n}\n\nconst Post: React.FC<Props> = ({\n  post: {\n    id, title, body, user, userComments,\n  },\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n\n    <div className=\"post\">\n      <button\n        className=\"btn bnt__post\"\n        type=\"button\"\n        onClick={() => dispatch(deletePosts(id))}\n      >\n        <i className=\"fa fa-trash\" />\n      </button>\n\n      <h3 className=\"post__title\">\n        {title}\n      </h3>\n      <p className=\"post__body\">\n        {body}\n      </p>\n      <User user={user} />\n      <CommentList userComments={userComments} postId={id} />\n    </div>\n  );\n};\n\nexport default Post;\n","import React, { useState, useCallback, FormEvent } from 'react';\nimport debounce from 'lodash.debounce';\nimport { useDispatch } from 'react-redux';\nimport { setQuery } from '../../store/query';\nimport './SearchField.css';\n\nconst SearchField = () => {\n  const dispatch = useDispatch();\n  const [visibleQuery, setVisibleQuery] = useState<string>('');\n\n  const dispatchWithDebounce = useCallback(debounce(dispatch, 500), []);\n\n  const handleSetQuery = (event: FormEvent<HTMLInputElement>) => {\n    const newQuery = event.currentTarget.value;\n\n    setVisibleQuery(newQuery);\n    dispatchWithDebounce(setQuery(newQuery));\n  };\n\n\n  return (\n    <input\n      type=\"text\"\n      value={visibleQuery}\n      placeholder=\"Posts filter\"\n      onChange={(event) => handleSetQuery(event)}\n    />\n  );\n};\n\nexport default SearchField;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Post from '../Post/Post';\nimport './PostList.css';\nimport { getVisiblePosts } from '../../store/index';\nimport SearchField from '../SearchField/SearchField';\n\nconst PostList = () => {\n  const visiblePosts = useSelector(getVisiblePosts);\n\n  return (\n    <>\n      <SearchField />\n      <div className=\"post__container\">\n        {visiblePosts.map((post: Post) => (\n          <Post\n            key={post.id}\n            post={post}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport { Start } from './components/Start';\nimport { isLoading, getMessage, isVisible } from './store';\nimport PostList from './components/PostList/PostList';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const visible = useSelector(isVisible);\n  const message = useSelector(getMessage) || 'Ready!';\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <h2>{loading ? 'Loading...' : message}</h2>\n      {!visible && <Start />}\n      {visible && <PostList />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}